/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ArrayInterface extends ethers.utils.Interface {
  functions: {
    "_joinReferenceType(uint256,uint256)": FunctionFragment;
    "join(bytes16[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_joinReferenceType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "join", values: [BytesLike[]]): string;

  decodeFunctionResult(
    functionFragment: "_joinReferenceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;

  events: {};
}

export class Array extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArrayInterface;

  functions: {
    _joinReferenceType(
      inputPointer: BigNumberish,
      gluePointer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { tempBytes: string }>;

    "join(bytes16[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(bytes[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(bytes4[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(bytes[],bytes)"(
      a: BytesLike[],
      glue: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(bytes32[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(bytes3[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(bytes8[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(string[])"(a: string[], overrides?: CallOverrides): Promise<[string]>;

    "join(bytes2[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(uint16[])"(
      a: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    "join(string[],string)"(
      a: string[],
      glue: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  _joinReferenceType(
    inputPointer: BigNumberish,
    gluePointer: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "join(bytes16[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(bytes[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(bytes4[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(bytes[],bytes)"(
    a: BytesLike[],
    glue: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "join(bytes32[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(bytes3[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(bytes8[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(string[])"(a: string[], overrides?: CallOverrides): Promise<string>;

  "join(bytes2[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

  "join(uint16[])"(
    a: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  "join(string[],string)"(
    a: string[],
    glue: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    _joinReferenceType(
      inputPointer: BigNumberish,
      gluePointer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "join(bytes16[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(bytes[])"(a: BytesLike[], overrides?: CallOverrides): Promise<string>;

    "join(bytes4[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(bytes[],bytes)"(
      a: BytesLike[],
      glue: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "join(bytes32[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(bytes3[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(bytes8[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(string[])"(a: string[], overrides?: CallOverrides): Promise<string>;

    "join(bytes2[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(uint16[])"(
      a: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    "join(string[],string)"(
      a: string[],
      glue: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    _joinReferenceType(
      inputPointer: BigNumberish,
      gluePointer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes16[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes4[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes[],bytes)"(
      a: BytesLike[],
      glue: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes32[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes3[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes8[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(string[])"(
      a: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(bytes2[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(uint16[])"(
      a: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "join(string[],string)"(
      a: string[],
      glue: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _joinReferenceType(
      inputPointer: BigNumberish,
      gluePointer: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes16[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes4[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes[],bytes)"(
      a: BytesLike[],
      glue: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes32[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes3[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes8[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(string[])"(
      a: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(bytes2[])"(
      a: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(uint16[])"(
      a: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "join(string[],string)"(
      a: string[],
      glue: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
