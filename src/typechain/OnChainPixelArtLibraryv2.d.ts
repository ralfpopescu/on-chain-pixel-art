/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface OnChainPixelArtLibraryv2Interface extends ethers.utils.Interface {
  functions: {
    "TABLE()": FunctionFragment;
    "getColorClass(uint256)": FunctionFragment;
    "getViewBox(uint256,uint256,uint256,uint256)": FunctionFragment;
    "increment(uint256)": FunctionFragment;
    "render(uint256[],uint256[],uint256,uint256,string,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "TABLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getColorClass",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getViewBox",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "render",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "TABLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getColorClass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getViewBox", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "render", data: BytesLike): Result;

  events: {};
}

export class OnChainPixelArtLibraryv2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OnChainPixelArtLibraryv2Interface;

  functions: {
    TABLE(overrides?: CallOverrides): Promise<[string]>;

    getColorClass(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getViewBox(
      xDim: BigNumberish,
      yDim: BigNumberish,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    increment(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    render(
      canvas: BigNumberish[],
      palette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      svgExtension: string,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;
  };

  TABLE(overrides?: CallOverrides): Promise<string>;

  getColorClass(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getViewBox(
    xDim: BigNumberish,
    yDim: BigNumberish,
    paddingX: BigNumberish,
    paddingY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  increment(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  render(
    canvas: BigNumberish[],
    palette: BigNumberish[],
    xDim: BigNumberish,
    yDim: BigNumberish,
    svgExtension: string,
    paddingX: BigNumberish,
    paddingY: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    TABLE(overrides?: CallOverrides): Promise<string>;

    getColorClass(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getViewBox(
      xDim: BigNumberish,
      yDim: BigNumberish,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    increment(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    render(
      canvas: BigNumberish[],
      palette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      svgExtension: string,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    TABLE(overrides?: CallOverrides): Promise<BigNumber>;

    getColorClass(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getViewBox(
      xDim: BigNumberish,
      yDim: BigNumberish,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increment(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    render(
      canvas: BigNumberish[],
      palette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      svgExtension: string,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TABLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getColorClass(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getViewBox(
      xDim: BigNumberish,
      yDim: BigNumberish,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increment(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    render(
      canvas: BigNumberish[],
      palette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      svgExtension: string,
      paddingX: BigNumberish,
      paddingY: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
