/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RendererInterface extends ethers.utils.Interface {
  functions: {
    "composeLayers(uint256[],uint256[],uint256)": FunctionFragment;
    "composePalettes(uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "encodeColorArray(uint256[],uint256,uint256)": FunctionFragment;
    "render(uint256[],uint256[],uint256,uint256)": FunctionFragment;
    "toString(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "composeLayers",
    values: [BigNumberish[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "composePalettes",
    values: [BigNumberish[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeColorArray",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "render",
    values: [BigNumberish[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "toString",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "composeLayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "composePalettes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeColorArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "render", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toString", data: BytesLike): Result;

  events: {};
}

export class Renderer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RendererInterface;

  functions: {
    composeLayers(
      layer1: BigNumberish[],
      layer2: BigNumberish[],
      totalPixels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { comp: BigNumber[] }>;

    composePalettes(
      palette1: BigNumberish[],
      palette2: BigNumberish[],
      colorCount1: BigNumberish,
      colorCount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { composedPalette: BigNumber[] }>;

    encodeColorArray(
      colors: BigNumberish[],
      pixelCompression: BigNumberish,
      colorCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { encoded: BigNumber[] }>;

    render(
      pixels: BigNumberish[],
      pallette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { svg: string }>;

    toString(value: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  composeLayers(
    layer1: BigNumberish[],
    layer2: BigNumberish[],
    totalPixels: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  composePalettes(
    palette1: BigNumberish[],
    palette2: BigNumberish[],
    colorCount1: BigNumberish,
    colorCount2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  encodeColorArray(
    colors: BigNumberish[],
    pixelCompression: BigNumberish,
    colorCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  render(
    pixels: BigNumberish[],
    pallette: BigNumberish[],
    xDim: BigNumberish,
    yDim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toString(value: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    composeLayers(
      layer1: BigNumberish[],
      layer2: BigNumberish[],
      totalPixels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    composePalettes(
      palette1: BigNumberish[],
      palette2: BigNumberish[],
      colorCount1: BigNumberish,
      colorCount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    encodeColorArray(
      colors: BigNumberish[],
      pixelCompression: BigNumberish,
      colorCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    render(
      pixels: BigNumberish[],
      pallette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toString(value: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    composeLayers(
      layer1: BigNumberish[],
      layer2: BigNumberish[],
      totalPixels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    composePalettes(
      palette1: BigNumberish[],
      palette2: BigNumberish[],
      colorCount1: BigNumberish,
      colorCount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeColorArray(
      colors: BigNumberish[],
      pixelCompression: BigNumberish,
      colorCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    render(
      pixels: BigNumberish[],
      pallette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toString(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    composeLayers(
      layer1: BigNumberish[],
      layer2: BigNumberish[],
      totalPixels: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    composePalettes(
      palette1: BigNumberish[],
      palette2: BigNumberish[],
      colorCount1: BigNumberish,
      colorCount2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeColorArray(
      colors: BigNumberish[],
      pixelCompression: BigNumberish,
      colorCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    render(
      pixels: BigNumberish[],
      pallette: BigNumberish[],
      xDim: BigNumberish,
      yDim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toString(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
