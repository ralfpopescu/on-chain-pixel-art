/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Array",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Array__factory>;
    getContractFactory(
      name: "Encoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Encoder__factory>;
    getContractFactory(
      name: "IOnChainPixelArt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOnChainPixelArt__factory>;
    getContractFactory(
      name: "IOnChainPixelArtv2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOnChainPixelArtv2__factory>;
    getContractFactory(
      name: "Moonbirds",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Moonbirds__factory>;
    getContractFactory(
      name: "OnChainPixelArt",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnChainPixelArt__factory>;
    getContractFactory(
      name: "OnChainPixelArtLibrary",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnChainPixelArtLibrary__factory>;
    getContractFactory(
      name: "OnChainPixelArtLibraryv2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnChainPixelArtLibraryv2__factory>;
    getContractFactory(
      name: "OnChainPixelArtv2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnChainPixelArtv2__factory>;
    getContractFactory(
      name: "Renderer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Renderer__factory>;

    getContractAt(
      name: "Array",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Array>;
    getContractAt(
      name: "Encoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Encoder>;
    getContractAt(
      name: "IOnChainPixelArt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOnChainPixelArt>;
    getContractAt(
      name: "IOnChainPixelArtv2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOnChainPixelArtv2>;
    getContractAt(
      name: "Moonbirds",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Moonbirds>;
    getContractAt(
      name: "OnChainPixelArt",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnChainPixelArt>;
    getContractAt(
      name: "OnChainPixelArtLibrary",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnChainPixelArtLibrary>;
    getContractAt(
      name: "OnChainPixelArtLibraryv2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnChainPixelArtLibraryv2>;
    getContractAt(
      name: "OnChainPixelArtv2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnChainPixelArtv2>;
    getContractAt(
      name: "Renderer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Renderer>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
